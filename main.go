package main

import (
	"fmt"
	"sync"
	"time"
)

//Разработать программу, которая будет последовательно отправлять значения в канал,
//а с другой стороны канала – читать эти значения. По истечении N секунд программа должна завершаться.
//Подсказка: используйте time.After или таймер для ограничения времени работы.

func main() {
	const N = 5                 // Время работы программы в секундах
	data := make(chan int)      // Канал для передачи данных (чисел)
	done := make(chan struct{}) // Канал-флаг для завершения работы

	var wg sync.WaitGroup // WaitGroup для ожидания завершения всех горутин

	// Горутина-писатель: генерирует числа и отправляет в канал data
	wg.Add(1)
	go func() {
		defer wg.Done() // Сообщаем WaitGroup, что горутина завершилась
		i := 0
		for {
			select {
			case <-done: // Если получили сигнал завершения
				close(data) // Закрываем канал, чтобы читатель завершился
				return
			case data <- i: // Иначе отправляем следующее число в канал
				i++
			}
		}
	}()

	// Горутина-читатель: читает числа из канала data и выводит их
	wg.Add(1)
	go func() {
		defer wg.Done()           // Сообщаем WaitGroup, что горутина завершилась
		for value := range data { // range завершится, когда канал data будет закрыт
			fmt.Printf("value is %d\n", value)
		}
	}()

	// Через N секунд подаём сигнал завершения
	<-time.After(N * time.Second)
	close(done) // Сигнализируем писателю, что пора завершаться

	wg.Wait() // Ждём завершения обеих горутин (писателя и читателя)
	fmt.Println("done after 5 sec")
}
